classdef Problem < handle &...
        matlab.mixin.Copyable
% A class represnting an NLP in the form:
% TODO(@anton) figure out how to write the NLP in docs in a nice way
%
% :param string casadi_type: either 'SX' (default) or 'MX' which determines the kind of CasADi symbolics uesd for all :class:`vdx.Vector`.
    properties (Access=public)
        % Primal variabiles
        %
        %:type: vdx.Vector
        w
        
        % Constraints
        %
        %:type: vdx.Vector
        g
        
        % Parameters
        %
        %:type: vdx.Vector
        p
        
        % Objective
        %
        %:type: casadi.SX|casadi.MX
        f
        
        % Objective value
        %
        %:type: double
        f_result
    end
    properties (Access=public, NonCopyable)
        % CasADi `nlpsol` object for the given problem.
        % generated by :meth:`create_solver` and is `[]` before the first time it is called.
        solver
    end

    methods (Access=public)
        function obj = Problem(varargin)
            p = inputParser;
            addParameter(p, 'casadi_type', 'SX');
            parse(p, varargin{:});
            
            obj.w = vdx.Vector(obj, -inf, inf, 0, 'casadi_type', p.Results.casadi_type);
            obj.p = vdx.Vector(obj, -inf, inf, 0, 'casadi_type', p.Results.casadi_type);
            obj.g = vdx.Vector(obj, 0, 0, 0, 'casadi_type', p.Results.casadi_type);
            obj.f = 0;
            obj.f_result = 0;
        end

        function create_solver(obj, casadi_options, plugin)
        % Creates the CasADi nlpsol object based on the current symbolics in :attr:`w`, :attr:`g`, :attr:`p`, and :attr:`f`.
        %
        %:param struct casadi_options: Options passed to `casadi.nlpsol` TODO(@anton) link to CasADi docs here.
        %:param char plugin: `casadi.nlpsol` plugin to use.
            w = obj.w(:);
            g = obj.g(:);
            p = obj.p(:);
            f = obj.f;

            if ~exist('plugin')
                plugin = 'ipopt';
            end

            casadi_nlp = struct('x', w, 'g', g, 'p', p, 'f', f);
            obj.solver = casadi.nlpsol('proj_fesd', plugin, casadi_nlp, casadi_options);
        end

        function [stats, nlp_results] = solve(obj)
        % Solves the NLP with the data currently in :attr:`w`, :attr:`g`, :attr:`p`.
        % Populates the results and Lagrange multipliers fielts of the same. TODO(@anton) figure out how to link attrs of other classes
        %
        %:returns: Stats and nlp_results.
            nlp_results = obj.solver('x0', obj.w.init,...
                'lbx', obj.w.lb,...
                'ubx', obj.w.ub,...
                'lbg', obj.g.lb,...
                'ubg', obj.g.ub,...
                'lam_g0', obj.g.mult,...% TODO(@anton) perhaps we use init instead of mult.
                'lam_x0', obj.w.mult,...
                'p', obj.p.init);
            if ~obj.solver.stats.success
                %warning("failed to converge")
            end
            obj.w.res = full(nlp_results.x);
            obj.w.mult = full(nlp_results.lam_x);
            obj.g.res = full(nlp_results.g);
            obj.g.mult = full(nlp_results.lam_g);
            obj.p.mult = full(nlp_results.lam_p);
            obj.f_result = full(nlp_results.f);
            stats = obj.solver.stats;
        end

        function mpcc_struct = to_casadi_struct(obj)
            mpcc_struct = struct;
            mpcc_struct.x = obj.w.sym;
            mpcc_struct.g = obj.g.sym;
            mpcc_struct.p = obj.p.sym;
            mpcc_struct.f = obj.f;
        end
    end
    
    methods (Access=protected)
        function cp = copyElement(obj)
            cp = copyElement@matlab.mixin.Copyable(obj);

            cp.w = copy(obj.w);
            cp.w.problem = cp;
            cp.g = copy(obj.g);
            cp.g.problem = cp;
            cp.p = copy(obj.p);
            cp.p.problem = cp;
            cp.f = obj.f;
        end
    end
end
